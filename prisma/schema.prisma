// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String      @id
  type      AccountType
  createdAt DateTime    @default(now()) @map("created_at")

  @@map("accounts")
}

model Image {
  id        String   @id @default(cuid())
  url       String
  publicId  String   @map("public_id")
  createdAt DateTime @default(now()) @map("created_at")

  profileImageFor Profile? @relation("ProfileImage")
  profileImagesFor Profile? @relation("ProfileImages", fields: [profileId], references: [id], onDelete: Cascade)
  profileId       String?  @map("profile_id")

  @@map("images")
}

model Profile {
  id           String      @id @default(cuid())
  accountId    String      @unique @map("account_id")
  nickname     String      @db.VarChar(50)
  email        String?     @db.VarChar(255)
  introduction String?     @db.VarChar(500)
  profileImage Image?      @relation("ProfileImage", fields: [profileImageId], references: [id])
  profileImageId String?   @unique @map("profile_image_id")
  images       Image[]     @relation("ProfileImages")
  mbti         MBTIType?
  gender       GenderType?
  height       Float?
  weight       Float?
  lastTokenAuthAt DateTime? @map("last_token_auth_at")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  
  qnas         QnA[]
  connections  ProfileConnection?
  connectedInProfiles ConnectedProfile[]
  messages     Message[]
  messageReadInfos MessageReadInfo[]

  @@map("profiles")
}

model QnA {
  id        String   @id @default(cuid())
  profileId String   @map("profile_id")
  question  String   @db.VarChar(500)
  answer    String   @db.VarChar(1500)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("qnas")
}

enum AccountType {
  email
  apple
  kakao
  gmail
}

enum MBTIType {
  INTJ
  INTP
  ENTJ
  ENTP
  INFJ
  INFP
  ENFJ
  ENFP
  ISTJ
  ISFJ
  ESTJ
  ESFJ
  ISTP
  ISFP
  ESTP
  ESFP
}

enum GenderType {
  MALE
  FEMALE
}

model ProfileConnection {
  id                 String   @id @default(cuid())
  myProfileId        String   @map("my_profile_id")
  profileIDsILike    String[] @default([]) @map("profile_ids_i_like")
  profileIDsLikeMe   String[] @default([]) @map("profile_ids_like_me")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  myProfile        Profile            @relation(fields: [myProfileId], references: [id], onDelete: Cascade)
  connectedProfiles ConnectedProfile[]

  @@map("profile_connections")
  @@unique([myProfileId])
  @@index([myProfileId])
}

model ConnectedProfile {
  id                 String            @id @default(cuid())
  profileConnectionId String            @map("profile_connection_id")
  profileId          String            @map("profile_id")
  addedAt            DateTime          @default(now()) @map("added_at")
  isNew              Boolean           @default(true) @map("is_new")
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")

  profileConnection ProfileConnection @relation(fields: [profileConnectionId], references: [id], onDelete: Cascade)
  profile           Profile           @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("connected_profiles")
  @@unique([profileConnectionId, profileId])
  @@index([profileConnectionId])
  @@index([profileId])
}

model EmailVerification {
  id        String   @id @default(cuid())
  accountId String   @map("account_id")
  email     String
  code      String   @db.VarChar(6)
  expiresAt DateTime @map("expires_at")
  isUsed    Boolean  @default(false) @map("is_used")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("email_verifications")
  @@index([accountId])
  @@index([email])
}

model Message {
  id              String   @id @default(cuid())
  writerProfileId String   @map("writer_profile_id")
  text            String
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  writerProfile Profile @relation(fields: [writerProfileId], references: [id], onDelete: Cascade)
  chat          Chat?   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId        String? @map("chat_id")

  @@map("messages")
  @@index([writerProfileId])
  @@index([chatId])
  @@index([chatId, createdAt]) // Composite index for chat messages ordering
}

model MessageReadInfo {
  id                         String   @id @default(cuid())
  profileId                  String   @map("profile_id")
  dateInfoUserViewedRecently DateTime @map("date_info_user_viewed_recently")

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  chat    Chat?   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId  String? @map("chat_id")

  @@map("message_read_infos")
  @@index([profileId])
  @@index([chatId])
}

model Chat {
  id              String   @id @default(cuid())
  participantsIds String[] @default([]) @map("participants_ids")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  messages         Message[]         @relation
  messageReadInfos MessageReadInfo[] @relation

  @@map("chats")
  @@index([participantsIds]) // For finding chats by participants
  @@index([updatedAt])       // For sorting by most recent
}
